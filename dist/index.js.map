{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cluster from 'cluster';\r\nimport * as fs from 'fs';\r\n\r\nconst TRACE = 0,\r\n    DEBUG = 1,\r\n    INFO = 2,\r\n    WARN = 3,\r\n    ERROR = 4,\r\n    SILENT = 5,\r\n    STATE_IDLE = 0,\r\n    STATE_PROCESS = 1,\r\n    STATE_FAIL = 2;\r\n\r\nlet logger: Logger;\r\n\r\ninterface Item {\r\n    msg: string;\r\n    level: string;\r\n}\r\n\r\nclass Logger {\r\n    opt: any;\r\n    stack: Array<Item>;\r\n    level: number;\r\n    filename: string;\r\n    state: number;\r\n\r\n    constructor(opt: any) {\r\n        this.opt = Object.assign({\r\n            level: INFO,\r\n            stdout: false\r\n        }, opt);\r\n        this.stack = [];\r\n        this.level = this.opt.level;\r\n        this.filename = this.opt.filename;\r\n        this.state = STATE_IDLE;\r\n\r\n        cluster.on('message', (worker, msg, handle) => {\r\n            if (msg && msg.type === 'Logger')\r\n                this.addToStack(msg);\r\n            this.init();\r\n        });\r\n    }\r\n\r\n    write(text: string) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.opt.stdout)\r\n                console.log(text);\r\n\r\n            fs.appendFile(this.opt.filename, text + '\\n', (err) => {\r\n                if (err)\r\n                    reject(err);\r\n                else\r\n                    resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    buildLine(msg: string, level: string, args: any) {\r\n        // 'text{0}text{1}text{2}'\r\n        if (args.length > 1) {\r\n            for (let i = 1; i <= args.length; i++) {\r\n                let arg;\r\n\r\n                try {\r\n                    arg = (typeof args[i] === 'object') ? JSON.stringify(args[i]) : args[i];\r\n                } catch (e) {\r\n                    arg = '';\r\n                }\r\n\r\n                msg = msg.replace(new RegExp(`\\\\{${i}\\\\}`, 'i'), arg);\r\n            }\r\n        }\r\n\r\n        let time = new Date().toISOString();\r\n        return `${time} - ${level.toUpperCase()}: ${msg}`;\r\n    }\r\n\r\n    addToStack(item: Item) {\r\n        this.stack.push(item);\r\n    }\r\n\r\n    addLog(msg: string, level: string, args?: any) {\r\n        if (cluster.isMaster) {\r\n            this.addToStack({\r\n                msg: this.buildLine(msg, level, args),\r\n                level: level\r\n            });\r\n            this.init();\r\n        } else {\r\n            process.send({\r\n                type: 'Logger',\r\n                msg: msg,\r\n                level: level\r\n            });\r\n        }\r\n    }\r\n\r\n    init() {\r\n        if (this.state === STATE_IDLE && this.stack.length) {\r\n            this.state = STATE_PROCESS;\r\n            this.process();\r\n        } else if (this.state === STATE_PROCESS && this.stack.length === 0) {\r\n            this.state = STATE_IDLE;\r\n        } else if (this.state === STATE_FAIL) {\r\n            if (this.stack.length) {\r\n                this.state = STATE_PROCESS;\r\n                this.process();\r\n            } else {\r\n                this.state = STATE_IDLE;\r\n            }\r\n        }\r\n    }\r\n\r\n    process() {\r\n        let self = this;\r\n        processNext();\r\n\r\n        function processNext() {\r\n            let last = self.stack[0];\r\n            if (last)\r\n                self.write(last.msg).then(() => {\r\n                    self.stack.shift();\r\n                    processNext(); // recursion\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                    self.state = STATE_FAIL;\r\n                    // delay on the error.\r\n                    setTimeout(() => {\r\n                        self.init();\r\n                    }, 2000);\r\n                });\r\n            else {\r\n                // stop recursion\r\n                self.state = STATE_IDLE;\r\n            }\r\n        }\r\n    }\r\n\r\n    trace(msg) {\r\n        if (TRACE >= this.level) {\r\n            this.addLog(msg, 'TRACE', arguments);\r\n        }\r\n    }\r\n\r\n    debug(msg) {\r\n        if (DEBUG >= this.level) {\r\n            this.addLog(msg, 'DEBUG', arguments);\r\n        }\r\n    }\r\n\r\n    info(msg) {\r\n        if (INFO >= this.level) {\r\n            this.addLog(msg, 'INFO', arguments);\r\n        }\r\n    }\r\n\r\n    warn(msg) {\r\n        if (WARN >= this.level) {\r\n            this.addLog(msg, 'WARN', arguments);\r\n        }\r\n    }\r\n\r\n    error(msg) {\r\n        if (ERROR >= this.level) {\r\n            this.addLog(msg, 'ERROR', arguments);\r\n        }\r\n    }\r\n}\r\n\r\nexport = (opt: any) => {\r\n    return logger || (logger = new Logger(opt));\r\n};"]}