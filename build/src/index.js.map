{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cluster from 'cluster';\nimport * as fs from 'fs';\n\nconst TRACE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARN = 3,\n    ERROR = 4,\n    SILENT = 5,\n    STATE_IDLE = 0,\n    STATE_PROCESS = 1,\n    STATE_FAIL = 2;\n\nlet logger: Logger;\n\ninterface Item {\n    msg: string;\n    level: string;\n}\n\nclass Logger {\n    opt: any;\n    stack: Array<Item>;\n    level: number;\n    filename: string;\n    state: number;\n\n    constructor(opt: any) {\n        this.opt = Object.assign({\n            level: INFO,\n            stdout: false\n        }, opt);\n        this.stack = [];\n        this.level = this.opt.level;\n        this.filename = this.opt.filename;\n        this.state = STATE_IDLE;\n\n        cluster.on('message', (worker, msg, handle) => {\n            if (msg && msg.type === 'Logger')\n                this.addToStack(msg);\n            this.init();\n        });\n    }\n\n    write(text: string) {\n        return new Promise((resolve, reject) => {\n            if (this.opt.stdout)\n                console.log(text);\n\n            fs.appendFile(this.opt.filename, text + '\\n', (err) => {\n                if (err)\n                    reject(err);\n                else\n                    resolve();\n            });\n        });\n    }\n\n    buildLine(msg: string, level: string, args: any) {\n        // 'text{0}text{1}text{2}'\n        if (args.length > 1) {\n            for (let i = 1; i <= args.length; i++) {\n                let arg;\n\n                try {\n                    arg = (typeof args[i] === 'object') ? JSON.stringify(args[i]) : args[i];\n                } catch (e) {\n                    arg = '';\n                }\n\n                msg = msg.replace(new RegExp(`\\\\{${i}\\\\}`, 'i'), arg);\n            }\n        }\n\n        let time = new Date().toISOString();\n        return `${time} - ${level.toUpperCase()}: ${msg}`;\n    }\n\n    addToStack(item: Item) {\n        this.stack.push(item);\n    }\n\n    addLog(msg: string, level: string, args?: any) {\n        if (cluster.isMaster) {\n            this.addToStack({\n                msg: this.buildLine(msg, level, args),\n                level: level\n            });\n            this.init();\n        } else {\n            process.send({\n                type: 'Logger',\n                msg: msg,\n                level: level\n            });\n        }\n    }\n\n    init() {\n        if (this.state === STATE_IDLE && this.stack.length) {\n            this.state = STATE_PROCESS;\n            this.process();\n        } else if (this.state === STATE_PROCESS && this.stack.length === 0) {\n            this.state = STATE_IDLE;\n        } else if (this.state === STATE_FAIL) {\n            if (this.stack.length) {\n                this.state = STATE_PROCESS;\n                this.process();\n            } else {\n                this.state = STATE_IDLE;\n            }\n        }\n    }\n\n    process() {\n        let self = this;\n        processNext();\n\n        function processNext() {\n            let last = self.stack[0];\n            if (last)\n                self.write(last.msg).then(() => {\n                    self.stack.shift();\n                    processNext(); // recursion\n                }).catch((e) => {\n                    console.log(e);\n                    self.state = STATE_FAIL;\n                    // delay on the error.\n                    setTimeout(() => {\n                        self.init();\n                    }, 2000);\n                });\n            else {\n                // stop recursion\n                self.state = STATE_IDLE;\n            }\n        }\n    }\n\n    trace(msg) {\n        if (TRACE >= this.level) {\n            this.addLog(msg, 'TRACE', arguments);\n        }\n    }\n\n    debug(msg) {\n        if (DEBUG >= this.level) {\n            this.addLog(msg, 'DEBUG', arguments);\n        }\n    }\n\n    info(msg) {\n        if (INFO >= this.level) {\n            this.addLog(msg, 'INFO', arguments);\n        }\n    }\n\n    warn(msg) {\n        if (WARN >= this.level) {\n            this.addLog(msg, 'WARN', arguments);\n        }\n    }\n\n    error(msg) {\n        if (ERROR >= this.level) {\n            this.addLog(msg, 'ERROR', arguments);\n        }\n    }\n}\n\nexport = (opt: any) => {\n    return logger || (logger = new Logger(opt));\n};"]}